// <auto-generated />
using System;
using MagniseAPI.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MagniseAPI.Migrations
{
    [DbContext(typeof(MarketContext))]
    [Migration("20240621143007_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("MagniseAPI.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            Name = "USD/EUR"
                        },
                        new
                        {
                            Id = new Guid("da2fd609-d754-4feb-8acd-c4f9ff13ba96"),
                            Name = "UAH/USD"
                        },
                        new
                        {
                            Id = new Guid("24810dfc-2d94-4cc7-aab5-cdf98b83f0c9"),
                            Name = "GB/EUR"
                        });
                });

            modelBuilder.Entity("MagniseAPI.Entities.PriceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Prices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b1c2b4d-48c7-402a-80c3-cc796ad49c6b"),
                            AssetId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            Price = 12.75m,
                            UpdateTime = new DateTime(2024, 6, 21, 17, 30, 5, 604, DateTimeKind.Local).AddTicks(8930)
                        },
                        new
                        {
                            Id = new Guid("d8663e5e-7494-4f81-8739-6e0de1bea7ee"),
                            AssetId = new Guid("da2fd609-d754-4feb-8acd-c4f9ff13ba96"),
                            Price = 29.44m,
                            UpdateTime = new DateTime(2024, 6, 21, 17, 30, 5, 604, DateTimeKind.Local).AddTicks(9093)
                        },
                        new
                        {
                            Id = new Guid("d173e20d-159e-4127-9ce9-b0ac2564ad97"),
                            AssetId = new Guid("da2fd609-d754-4feb-8acd-c4f9ff13ba96"),
                            Price = 679.337m,
                            UpdateTime = new DateTime(2024, 6, 21, 17, 30, 5, 604, DateTimeKind.Local).AddTicks(9115)
                        });
                });

            modelBuilder.Entity("MagniseAPI.Entities.PriceInfo", b =>
                {
                    b.HasOne("MagniseAPI.Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });
#pragma warning restore 612, 618
        }
    }
}
